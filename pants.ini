#
[DEFAULT]
pants_version: 0.0.70

# print_exception_stacktrace: True

local_artifact_cache = %(pants_bootstrapdir)s/artifact_cache

[jvm]
options: ["-Xmx1g"]
# options: ["-encoding", "utf8", "-language:_", "-Yno-predef", "-Yno-imports", "-Yno-adapted-args" ]

[cache.bootstrap]
# The just-in-time tool shading performed by jvm tool bootstrapping is very expensive, so we turn
# on artifact caching for it that can survive clean-all.
read_from = ["%(local_artifact_cache)s"]
write_to = ["%(local_artifact_cache)s"]

[goals]
bootstrap_buildfiles: [
    '%(buildroot)s/BUILD',
  ]

[scala-platform]
version: 2.11

[jvm-platform]
default_platform: java8
platforms: {
    'java8': {'source': '8', 'target': '8', 'args': [] },
  }


[compile.zinc]
worker_count: 4
scalac_plugins: []
jvm_options: [
    '-Xmx4g', '-XX:+UseConcMarkSweepGC', '-XX:ParallelGCThreads=4',
    # bigger cache size for our big projects (default is just 5)
    '-Dzinc.analysis.cache.limit=1000',
  ]
args: [
    '-S-encoding', '-SUTF-8',
    '-S-g:vars',
    '-S-language:_',
    '-S-Yno-predef',
    '-S-Yno-imports',
    '-S-Yno-adapted-args',
  ]
warning_args: [
    '-S-deprecation',
    '-S-unchecked',
    '-S-feature',
  ]
no_warning_args: [
    '-S-nowarn',
  ]

[jvm.test.junit]
options: ['-Djava.awt.headless=true', '-Djava.net.preferIPv4Stack=true', '-Xmx1g']

[test.junit]
output_mode: ALL

[idea]
scala_maximum_heap_size_mb: 1024
java_maximum_heap_size_mb: 1024
